<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
  version="3.1">
  <display-name>spring learning</display-name>

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring/applicationContext.xml</param-value>
  </context-param>

  <!-- 在Spring框架中是如何解决从页面传来的字符串的编码问题的呢？
下面我们来看看Spring框架给我们提供过滤器CharacterEncodingFilter
这个过滤器就是针对于每次浏览器请求进行过滤的，然后再其之上添加了父类没有的功能即处理字符编码。
其中encoding用来设置编码格式，forceEncoding用来设置是否理会 request.getCharacterEncoding()方法，
设置为true则强制覆盖之前的编码格式。-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter
    </filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!--启动Web容器时，自动装配ApplicationContext的配置信息-->
  <listener>
    <listener-class>
      org.springframework.web.context.ContextLoaderListener
    </listener-class>
  </listener>

  <!--处理因使用内省API而导致的内存泄漏问题-->

  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener
    </listener-class>
  </listener>


  <!--spring MVC 的前端控制器,默认情况下,DispatcherServlet 在加载时会从一个基于这个servlet名字的
 XML文件中加载SPRING应用上下文。在这个示例中,DispatcherServlet将尝试从一个名为spring-servlet.xml
 的文件（位于应用程序的WEB-INF目录下）来加载应用上下文-->
  <servlet>
    <!--在DispatcherServlet初始化过程中，框架会在web应用的 WEB-INF 文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件，加载上下文中定义的bean-->
    <servlet-name>spring</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet
    </servlet-class>
    <!--指名配置文件，不使用默认文件名-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <!--<param-value> 可以有多种写法-->
      <!--1. 不写，使用默认值： /WEB/INF/[servlet-name]-servlet.xml-->
      <!--2. <param-value>/WEB-INF/classes/dispatcher-servlet.xml</param-value>-->
      <!--3. <param-value>classpath*:dispatcher-servlet.xml</param-value>-->
      <!--4. 多个值用逗号分隔-->
      <param-value>/WEB-INF/spring-servlet.xml</param-value>
    </init-param>
    <!--启动顺序，让这个servlet随servlet容器一起启动-->
    <!--TODO if missing below,启动jetty报错-->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <!--声明DispatcherServlet处理哪些URL-->
  <servlet-mapping>
    <servlet-name>spring</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!--指定欢迎页面-->
  <welcome-file-list>
    <welcome-file>/index.html</welcome-file>
  </welcome-file-list>

  <!--&lt;!&ndash;会话超时配置，单位：分钟-->
  <session-config>
    <session-timeout>360</session-timeout>
  </session-config>

  <error-page>
    <error-code>404</error-code>
    <location>/WEB-INF/404.jsp</location>
  </error-page>


</web-app>